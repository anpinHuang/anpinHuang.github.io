plot(simulationPath[,1],type='l')
for(i in 2:100){
lines(simulationPath[,1])
}
plot(simulationPath[,1],type='l')
for(i in 2:100){
lines(simulationPath[,i])
}
plot(simulationPath[,1],type='l',ylim=c(100000000,0))
for(i in 2:100){
lines(simulationPath[,i])
}
plot(simulationPath[,1],type='l',ylim=c(100000000,0))
plot(simulationPath[,1],type='l',ylim=c(0,100000000))
for(i in 2:100){
lines(simulationPath[,i])
}
plot(simulationPath[,1],type='l',ylim=c(0,200000000))
for(i in 2:100){
lines(simulationPath[,i])
}
plot(simulationPath[,1],type='l',ylim=c(0,300000000))
for(i in 2:100){
lines(simulationPath[,i])
}
plot(simulationPath[,1],type='l',ylim=c(0,500000000))
for(i in 2:100){
lines(simulationPath[,i])
}
simulationPath <- matrix(NA,nrow=50,ncol=100)
for(i in 1:100) {
simulationPath[,i] <- calculateBalance(initialCapital=50000000,expectedReturn=0.07,returnSd=0.2,
CapitalGainTax=0.2,PropertyValue=10000000,PropertyTax=0.02,
EstimatedLife=50,AnnualSpending=500000,SpendingInflation=0.02,
year1Spending=12000000)
}
plot(simulationPath[,1],type='l',ylim=c(0,500000000))
for(i in 2:100){
lines(simulationPath[,i])
}
simulationPath <- matrix(NA,nrow=50,ncol=50)
for(i in 1:50) {
simulationPath[,i] <- calculateBalance(initialCapital=50000000,expectedReturn=0.07,returnSd=0.2,
CapitalGainTax=0.2,PropertyValue=10000000,PropertyTax=0.02,
EstimatedLife=50,AnnualSpending=500000,SpendingInflation=0.02,
year1Spending=12000000)
}
plot(simulationPath[,1],type='l',ylim=c(0,500000000))
for(i in 2:50){
lines(simulationPath[,i])
}
View(simulationPath[50,])
View(as.data.frame(simulationPath[50,]))
mean(simulationPath[50,])
matplot(simulationPath)
matplot(simulationPath,type='l')
hist(simulationPath[50,])
simulationPath[50,]
calculateBalance <- function(initialCapital,expectedReturn,returnSd,
CapitalGainTax,PropertyValue,PropertyTax,
EstimatedLife,AnnualSpending,SpendingInflation,
year1Spending) {
## get the random return (normal dist.)
set.seed(1)
ReturnVector <- rnorm(EstimatedLife,expectedReturn,returnSd)
BalanceVector <- matrix(NA,nrow=EstimatedLife,ncol=1)
BalanceVector[1] <- initialCapital-year1Spending
for(i in 2:length(BalanceVector)) {
BalanceVector[i] <- (BalanceVector[i-1]-AnnualSpending*(1+SpendingInflation))*(1+ReturnVector[i]*(1-CapitalGainTax))
BalanceVector[i] <- BalanceVector[i]-PropertyValue*PropertyTax
AnnualSpending <- AnnualSpending*(1+SpendingInflation)
}
if(length(which(BalanceVector<=0))>0) {
BalanceVector[which(BalanceVector<=0)[1]:length(BalanceVector)] <- 0
}
return(BalanceVector)
}
simulationPath <- matrix(NA,nrow=50,ncol=50)
for(i in 1:50) {
simulationPath[,i] <- calculateBalance(initialCapital=50000000,expectedReturn=0.07,returnSd=0.2,
CapitalGainTax=0.2,PropertyValue=10000000,PropertyTax=0.02,
EstimatedLife=50,AnnualSpending=500000,SpendingInflation=0.02,
year1Spending=12000000)
}
plot(simulationPath[,1],type='l',ylim=c(0,500000000))
for(i in 2:50){
lines(simulationPath[,i])
}
ReturnVector <- rnorm(EstimatedLife,expectedReturn,returnSd)
ReturnVector
ReturnVector <- sample(ReturnVector)
ReturnVector <- sample(ReturnVector)
ReturnVector
set.seed(1)
ReturnVector <- rnorm(EstimatedLife,expectedReturn,returnSd)
ReturnVector
ReturnVector <- rnorm(EstimatedLife,expectedReturn,returnSd)
ReturnVector <- sample(ReturnVector)
calculateBalance <- function(initialCapital,expectedReturn,returnSd,
CapitalGainTax,PropertyValue,PropertyTax,
EstimatedLife,AnnualSpending,SpendingInflation,
year1Spending) {
## get the random return (normal dist.)
set.seed(1)
ReturnVector <- rnorm(EstimatedLife,expectedReturn,returnSd)
ReturnVector <- sample(ReturnVector)
BalanceVector <- matrix(NA,nrow=EstimatedLife,ncol=1)
BalanceVector[1] <- initialCapital-year1Spending
for(i in 2:length(BalanceVector)) {
BalanceVector[i] <- (BalanceVector[i-1]-AnnualSpending*(1+SpendingInflation))*(1+ReturnVector[i]*(1-CapitalGainTax))
BalanceVector[i] <- BalanceVector[i]-PropertyValue*PropertyTax
AnnualSpending <- AnnualSpending*(1+SpendingInflation)
}
if(length(which(BalanceVector<=0))>0) {
BalanceVector[which(BalanceVector<=0)[1]:length(BalanceVector)] <- 0
}
return(BalanceVector)
}
simulationPath <- matrix(NA,nrow=50,ncol=50)
for(i in 1:50) {
simulationPath[,i] <- calculateBalance(initialCapital=50000000,expectedReturn=0.07,returnSd=0.2,
CapitalGainTax=0.2,PropertyValue=10000000,PropertyTax=0.02,
EstimatedLife=50,AnnualSpending=500000,SpendingInflation=0.02,
year1Spending=12000000)
}
plot(simulationPath[,1],type='l',ylim=c(0,500000000))
for(i in 2:50){
lines(simulationPath[,i])
}
calculateBalance <- function(initialCapital,expectedReturn,returnSd,
CapitalGainTax,PropertyValue,PropertyTax,
EstimatedLife,AnnualSpending,SpendingInflation,
year1Spending) {
## get the random return (normal dist.)
set.seed(1)
ReturnVector <- rnorm(EstimatedLife,expectedReturn,returnSd)
ReturnVector <- sample(ReturnVector)
BalanceVector <- matrix(NA,nrow=EstimatedLife,ncol=1)
BalanceVector[1] <- initialCapital-year1Spending
for(i in 2:length(BalanceVector)) {
BalanceVector[i] <- (BalanceVector[i-1]-AnnualSpending*(1+SpendingInflation))*(1+ReturnVector[i]*(1-CapitalGainTax))
BalanceVector[i] <- BalanceVector[i]-PropertyValue*PropertyTax
AnnualSpending <- AnnualSpending*(1+SpendingInflation)
}
if(length(which(BalanceVector<=0))>0) {
BalanceVector[which(BalanceVector<=0)[1]:length(BalanceVector)] <- 0
}
return(BalanceVector)
}
ReturnVector <- rnorm(EstimatedLife,expectedReturn,returnSd)
ReturnVector
set.seed(1)
ReturnVector <- rnorm(EstimatedLife,expectedReturn,returnSd)
ReturnVector
set.seed(1)
ReturnVector <- rnorm(EstimatedLife,expectedReturn,returnSd)
ReturnVector
ReturnVector <- sample(ReturnVector)
ReturnVector
ReturnVector <- sample(ReturnVector)
ReturnVector
simulationPath <- matrix(NA,nrow=50,ncol=50)
for(i in 1:50) {
simulationPath[,i] <- calculateBalance(initialCapital=50000000,expectedReturn=0.07,returnSd=0.2,
CapitalGainTax=0.2,PropertyValue=10000000,PropertyTax=0.02,
EstimatedLife=50,AnnualSpending=500000,SpendingInflation=0.02,
year1Spending=12000000)
}
plot(simulationPath[,1],type='l',ylim=c(0,500000000))
for(i in 2:50){
lines(simulationPath[,i])
}
simulationPath[50,]
ReturnVector
set.seed(1)
ReturnVector <- rnorm(EstimatedLife,expectedReturn,returnSd)
ReturnVector <- sample(ReturnVector)
set.seed(1)
ReturnVector
set.seed(1)
ReturnVector <- rnorm(EstimatedLife,expectedReturn,returnSd)
ReturnVector <- sample(ReturnVector)
ReturnVector
ReturnVector <- sample(ReturnVector)
set.seed()
calculateBalance <- function(initialCapital,expectedReturn,returnSd,
CapitalGainTax,PropertyValue,PropertyTax,
EstimatedLife,AnnualSpending,SpendingInflation,
year1Spending) {
## get the random return (normal dist.)
set.seed(1)
ReturnVector <- rnorm(EstimatedLife,expectedReturn,returnSd)
set.seed(Sys.time())
ReturnVector <- sample(ReturnVector)
BalanceVector <- matrix(NA,nrow=EstimatedLife,ncol=1)
BalanceVector[1] <- initialCapital-year1Spending
for(i in 2:length(BalanceVector)) {
BalanceVector[i] <- (BalanceVector[i-1]-AnnualSpending*(1+SpendingInflation))*(1+ReturnVector[i]*(1-CapitalGainTax))
BalanceVector[i] <- BalanceVector[i]-PropertyValue*PropertyTax
AnnualSpending <- AnnualSpending*(1+SpendingInflation)
}
if(length(which(BalanceVector<=0))>0) {
BalanceVector[which(BalanceVector<=0)[1]:length(BalanceVector)] <- 0
}
return(BalanceVector)
}
simulationPath <- matrix(NA,nrow=50,ncol=50)
for(i in 1:50) {
simulationPath[,i] <- calculateBalance(initialCapital=50000000,expectedReturn=0.07,returnSd=0.2,
CapitalGainTax=0.2,PropertyValue=10000000,PropertyTax=0.02,
EstimatedLife=50,AnnualSpending=500000,SpendingInflation=0.02,
year1Spending=12000000)
}
plot(simulationPath[,1],type='l',ylim=c(0,500000000))
for(i in 2:50){
lines(simulationPath[,i])
}
set.seed(1)
ReturnVector <- rnorm(EstimatedLife,expectedReturn,returnSd)
set.seed(Sys.time())
ReturnVector <- sample(ReturnVector)
ReturnVector
set.seed(1)
ReturnVector <- rnorm(EstimatedLife,expectedReturn,returnSd)
set.seed(Sys.time())
ReturnVector <- sample(ReturnVector)
ReturnVector
rm(list=".Random.seed", envir=globalenv())
calculateBalance <- function(initialCapital,expectedReturn,returnSd,
CapitalGainTax,PropertyValue,PropertyTax,
EstimatedLife,AnnualSpending,SpendingInflation,
year1Spending) {
## get the random return (normal dist.)
set.seed(1)
ReturnVector <- rnorm(EstimatedLife,expectedReturn,returnSd)
rm(list=".Random.seed", envir=globalenv())
ReturnVector <- sample(ReturnVector)
BalanceVector <- matrix(NA,nrow=EstimatedLife,ncol=1)
BalanceVector[1] <- initialCapital-year1Spending
for(i in 2:length(BalanceVector)) {
BalanceVector[i] <- (BalanceVector[i-1]-AnnualSpending*(1+SpendingInflation))*(1+ReturnVector[i]*(1-CapitalGainTax))
BalanceVector[i] <- BalanceVector[i]-PropertyValue*PropertyTax
AnnualSpending <- AnnualSpending*(1+SpendingInflation)
}
if(length(which(BalanceVector<=0))>0) {
BalanceVector[which(BalanceVector<=0)[1]:length(BalanceVector)] <- 0
}
return(BalanceVector)
}
simulationPath <- matrix(NA,nrow=50,ncol=50)
for(i in 1:50) {
simulationPath[,i] <- calculateBalance(initialCapital=50000000,expectedReturn=0.07,returnSd=0.2,
CapitalGainTax=0.2,PropertyValue=10000000,PropertyTax=0.02,
EstimatedLife=50,AnnualSpending=500000,SpendingInflation=0.02,
year1Spending=12000000)
}
plot(simulationPath[,1],type='l',ylim=c(0,500000000))
for(i in 2:50){
lines(simulationPath[,i])
}
plot(simulationPath[,1],type='l',ylim=c(0,800000000))
for(i in 2:50){
lines(simulationPath[,i])
}
matplot(simulationPath,type='l')
simulationPath <- matrix(NA,nrow=50,ncol=50)
for(i in 1:50) {
simulationPath[,i] <- calculateBalance(initialCapital=50000000,expectedReturn=0.07,returnSd=0.2,
CapitalGainTax=0.2,PropertyValue=10000000,PropertyTax=0.02,
EstimatedLife=50,AnnualSpending=800000,SpendingInflation=0.02,
year1Spending=12000000)
}
plot(simulationPath[,1],type='l',ylim=c(0,800000000))
for(i in 2:50){
lines(simulationPath[,i])
}
matplot(simulationPath,type='l')
hist(simulationPath[50,],breaks=50)
simulationPath <- matrix(NA,nrow=50,ncol=100)
for(i in 1:100 {
simulationPath[,i] <- calculateBalance(initialCapital=50000000,expectedReturn=0.07,returnSd=0.2,
CapitalGainTax=0.2,PropertyValue=10000000,PropertyTax=0.02,
EstimatedLife=50,AnnualSpending=800000,SpendingInflation=0.02,
year1Spending=12000000)
}
plot(simulationPath[,1],type='l',ylim=c(0,800000000))
for(i in 2:100{
lines(simulationPath[,i])
}
matplot(simulationPath,type='l')
hist(simulationPath[100],breaks=50)
simulationPath <- matrix(NA,nrow=50,ncol=100)
for(i in 1:100) {
simulationPath[,i] <- calculateBalance(initialCapital=50000000,expectedReturn=0.07,returnSd=0.2,
CapitalGainTax=0.2,PropertyValue=10000000,PropertyTax=0.02,
EstimatedLife=50,AnnualSpending=800000,SpendingInflation=0.02,
year1Spending=12000000)
}
plot(simulationPath[,1],type='l',ylim=c(0,800000000))
for(i in 2:100{
lines(simulationPath[,i])
}
matplot(simulationPath,type='l')
hist(simulationPath[100],breaks=50)
simulationPath <- matrix(NA,nrow=50,ncol=100)
for(i in 1:100) {
simulationPath[,i] <- calculateBalance(initialCapital=50000000,expectedReturn=0.07,returnSd=0.2,
CapitalGainTax=0.2,PropertyValue=10000000,PropertyTax=0.02,
EstimatedLife=50,AnnualSpending=800000,SpendingInflation=0.02,
year1Spending=12000000)
}
plot(simulationPath[,1],type='l',ylim=c(0,800000000))
for(i in 2:100) {
lines(simulationPath[,i])
}
matplot(simulationPath,type='l')
hist(simulationPath[100],breaks=50)
hist(simulationPath[100,],breaks=50)
hist(simulationPath[50,],breaks=50)
hist(simulationPath[50,],breaks=100)
simulationPath <- matrix(NA,nrow=50,ncol=1000)
for(i in 1:1000) {
simulationPath[,i] <- calculateBalance(initialCapital=50000000,expectedReturn=0.07,returnSd=0.2,
CapitalGainTax=0.2,PropertyValue=10000000,PropertyTax=0.02,
EstimatedLife=50,AnnualSpending=800000,SpendingInflation=0.02,
year1Spending=12000000)
}
plot(simulationPath[,1],type='l',ylim=c(0,800000000))
for(i in 2:1000) {
lines(simulationPath[,i])
}
matplot(simulationPath,type='l')
hist(simulationPath[50,],breaks=100)
calculateBalance <- function(initialCapital,expectedReturn,returnSd,
CapitalGainTax,PropertyValue,PropertyTax,
EstimatedLife,AnnualSpending,SpendingInflation,
year1Spending) {
## get the random return (normal dist.)
set.seed(1)
ReturnVector <- rnorm(EstimatedLife,expectedReturn,returnSd)
rm(list=".Random.seed", envir=globalenv())
ReturnVector <- sample(ReturnVector)
BalanceVector <- matrix(NA,nrow=EstimatedLife,ncol=1)
BalanceVector[1] <- initialCapital-year1Spending
for(i in 2:length(BalanceVector)) {
if(ReturnVector[i]>0) {
BalanceVector[i] <- (BalanceVector[i-1]-AnnualSpending*(1+SpendingInflation))*(1+ReturnVector[i]*(1-CapitalGainTax))
} else {
BalanceVector[i] <- (BalanceVector[i-1]-AnnualSpending*(1+SpendingInflation))*(1+ReturnVector[i])
}
BalanceVector[i] <- BalanceVector[i]-PropertyValue*PropertyTax
AnnualSpending <- AnnualSpending*(1+SpendingInflation)
}
if(length(which(BalanceVector<=0))>0) {
BalanceVector[which(BalanceVector<=0)[1]:length(BalanceVector)] <- 0
}
return(BalanceVector)
}
simulationPath <- matrix(NA,nrow=50,ncol=1000)
for(i in 1:1000) {
simulationPath[,i] <- calculateBalance(initialCapital=50000000,expectedReturn=0.08,returnSd=0.2,
CapitalGainTax=0.2,PropertyValue=10000000,PropertyTax=0.02,
EstimatedLife=50,AnnualSpending=800000,SpendingInflation=0.02,
year1Spending=12000000)
}
plot(simulationPath[,1],type='l',ylim=c(0,800000000))
for(i in 2:1000) {
lines(simulationPath[,i])
}
matplot(simulationPath,type='l')
hist(simulationPath[50,],breaks=100)
calculateBalance <- function(initialCapital,expectedReturn,returnSd,
CapitalGainTax,PropertyValue,PropertyTax,
EstimatedLife,AnnualSpending,SpendingInflation,
year1Spending) {
## get the random return (normal dist.)
set.seed(1)
ReturnVector <- rnorm(EstimatedLife,expectedReturn,returnSd)
rm(list=".Random.seed", envir=globalenv())
ReturnVector <- sample(ReturnVector)
BalanceVector <- matrix(NA,nrow=EstimatedLife,ncol=1)
BalanceVector[1] <- initialCapital-year1Spending
for(i in 2:length(BalanceVector)) {
if(ReturnVector[i]>0) {
BalanceVector[i] <- (BalanceVector[i-1]-AnnualSpending*(1+SpendingInflation))*(1+ReturnVector[i]*(1-CapitalGainTax))
} else {
BalanceVector[i] <- (BalanceVector[i-1]-AnnualSpending*(1+SpendingInflation))*(1+ReturnVector[i])
}
BalanceVector[i] <- BalanceVector[i]-PropertyValue*PropertyTax
AnnualSpending <- AnnualSpending*(1+SpendingInflation)
}
if(length(which(BalanceVector<=0))>0) {
BalanceVector[which(BalanceVector<=0)[1]:length(BalanceVector)] <- 0
}
return(BalanceVector)
}
simulationPath <- matrix(NA,nrow=50,ncol=1000)
for(i in 1:1000) {
simulationPath[,i] <- calculateBalance(initialCapital=50000000,expectedReturn=0.08,returnSd=0.2,
CapitalGainTax=0.2,PropertyValue=10000000,PropertyTax=0.02,
EstimatedLife=60,AnnualSpending=800000,SpendingInflation=0.02,
year1Spending=12000000)
}
plot(simulationPath[,1],type='l',ylim=c(0,800000000))
for(i in 2:1000) {
lines(simulationPath[,i])
}
matplot(simulationPath,type='l')
hist(simulationPath[50,],breaks=100)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(SparkR,lib.loc = "Users/an-pin/Spark/lib")
library(SparkR,lib.loc = "Users/an-pin/spark/R/lib")
library(SparkR,lib.loc = "/Users/an-pin/spark/r/lib/")
sc <- sparkR.init(master="local[*]",sparkEnvir = list(spark.driver.memory='2g'))
sc <- sparkR.init(master="local[*]")
Sys.setenv(SPARK_HOME="/Users/an-pin/spark")
)
sc <- sparkR.init()
sqlContent <- sparkRSQL.init(sc)
sc <- sparkR.session()
sqlContent <- sparkRSQL.init(sc)
if (nchar(Sys.getenv("SPARK_HOME")) < 1) {
Sys.setenv(SPARK_HOME = "/Users/an-pin/spark"
}
library(SparkR, lib.loc = c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib")))
sparkR.session(master = "local[*]", sparkConfig = list(spark.driver.memory = "2g"))
nchar(Sys.getenv("SPARK_HOME")) < 1
Sys.setenv(SPARK_HOME = "/Users/an-pin/spark"
}
library(SparkR, lib.loc = c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib")))
sparkR.session(master = "local[*]", sparkConfig = list(spark.driver.memory = "2g"))
SPARK_HOME
Sys.setenv(SPARK_HOME = "/Users/an-pin/spark")
library(SparkR, lib.loc = c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib")))
sparkR.session(master = "local[*]", sparkConfig = list(spark.driver.memory = "2g"))
sc <- sparkR.session(master = "local[*]", sparkConfig = list(spark.driver.memory = "2g"))
sqlContext <- SQLContext(sc)
sqlContext <- sqlContext(sc)
sqlContext <- sparkRSQL.init((sc))
head(failthful)
head(faithful)
createOrReplaceTempView(faithful, "faithful")
df <- createDataFrame(sc,faithful)
df <- createDataFrame(faithful)
registerTempTable(df,"faith")
createOrReplaceTempView(df,"faith")
res <- sql("SELECT erruptions, waiting FROM faith WHERE waiting <= 55")
people <- read.df("./examples/src/main/resources/people.json", "json")
head(faithful)
res <- sql("SELECT eruptions, waiting FROM faith WHERE waiting <= 55")
res
head(res)
property <- read.df("properties_2016.csv")
property <- read.df("properties_2016.csv",source = "csv",
header="true", inferSchema = "true")
property <- createDataFrame(property)
head(property)
createOrReplaceTempView(property,"property")
install.packages("party")
install.packages(c("BH", "chron", "cluster", "DBI", "digest", "gsubfn", "httpuv", "MASS", "Matrix", "mgcv", "Rcpp", "rlang", "rpart", "shiny", "tibble"))
install.packages("party")
.Library
tableList <- dbListTables(mydb)
library("RSQLite")
# connect to the sqlite file
mydb = dbConnect(RSQLite::SQLite(), dbname="database.sqlite") ## load the music review data
## list all tables
tableList <- dbListTables(mydb)
tableList <- dbListTables(mydb)
tableList
save.image("~/GitHub/anpinHuang.github.io/Untitled.RData")
library("RSQLite")
# connect to the sqlite file
mydb = dbConnect(RSQLite::SQLite(), dbname="database.sqlite") ## load the music review data
## list all tables
tableList <- dbListTables(mydb)
tableList
reviews <- dbReadTable(mydb,"reviews")
mydb = dbConnect(RSQLite::SQLite(), dbname="database.sqlite") ## load the music review data
View(mydb)
reviews <- dbReadTable(mydb,"reviews")
artists <- dbReadTable(mydb,"artists")
dbDisconnect(mydb)
mydb = dbConnect(RSQLite::SQLite(), dbname="database.sqlite") ## load the music review data
tableList <- dbListTables(mydb)
setwd("~/GitHub/anpinHuang.github.io")
library("RSQLite")
# connect to the sqlite file
mydb = dbConnect(RSQLite::SQLite(), dbname="database.sqlite") ## load the music review data
tableList <- dbListTables(mydb)
# connect to the sqlite file
mydb = dbConnect(RSQLite::SQLite(), dbname="database2.sqlite") ## load the music review data
## list all tables
tableList <- dbListTables(mydb)
tableList
dbSendQuery(mydb, 'DROP TABLE newreviews')
tableList
tableList <- dbListTables(mydb)
tableList
dbSendQuery(mydb, 'DROP TABLE reviewWithGenres')
dbSendQuery(mydb, 'DROP TABLE releaseYears')
dbGetQuery(mydb,'SELECT g.genre, r.score, count(CASE WHEN r.score>7 THEN 1 END) FROM reviews r LEFT JOIN genres g  ON r.reviewid=g.reviewid GROUP BY g.genre')
dbGetQuery(mydb,'SELECT g.genre, count(CASE WHEN r.score>7 THEN 1 END) FROM reviews r LEFT JOIN genres g  ON r.reviewid=g.reviewid GROUP BY g.genre')
dbGetQuery(mydb,'SELECT g.genre, count(CASE WHEN r.score >7 THEN 1 END) AS count_high_score, count(*) AS count_all FROM reviews r  JOIN genres g  ON r.reviewid=g.reviewid GROUP BY g.genre')
dbGetQuery(mydb,'SELECT g.genre, CAST(count(CASE WHEN r.score >7 THEN 1 END) AS DOUBLE)/count(*) AS ratio ,count(CASE WHEN r.score >7 THEN 1 END) AS count_high_score, count(*) AS count_all FROM reviews r  JOIN genres g  ON r.reviewid=g.reviewid GROUP BY g.genre')
