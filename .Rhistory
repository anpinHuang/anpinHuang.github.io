Hi Sally,
In case you don't have my resume yet, please find my updated resume in the attachment
Hi Sally,
In case you don't have my resume yet, please find my updated resume in the attachment
library(data.table)
library(plyr)
churnAnalysis <- fread("WA_Fn-UseC_-Telco-Customer-Churn.csv")
churnAnalysis <- as.data.frame(churnAnalysis)
head(churnAnalysis)
churnAnalysis <- fread("WA_Fn-UseC_-Telco-Customer-Churn.csv")
setwd("/Users/an-pin/GitHub/anpinHuang.github.io")
churnAnalysis <- fread("WA_Fn-UseC_-Telco-Customer-Churn.csv")
churnAnalysis <- as.data.frame(churnAnalysis)
head(churnAnalysis)
library("RSQLite")
# connect to the sqlite file
mydb = dbConnect(RSQLite::SQLite(), dbname="database.sqlite") ## load the music review data
## list all tables
tableList <- dbListTables(mydb)
reviews <- dbReadTable(mydb,"reviews")
artists <- dbReadTable(mydb,"artists")
## I want to find out how many artists first
artistsList <-  dbGetQuery(mydb, 'SELECT DISTINCT artist  FROM artists')
## I want to find out for each artist, how many reviews have they got (use Group By)
artistsReviewCount <- dbGetQuery(mydb, 'SELECT COUNT(a.reviewid), a.* FROM artists AS a GROUP BY a.artist ORDER BY COUNT(a.reviewid) DESC')
head(artistsReviewCount)
artistList <- unique(artists)
#tempReview_Artist <- merge(artists,reviews,by.x="reviewid",by.y="reviewid",all.y=TRUE) ## artist is already in the review table....
## I want to find out for each artist, how many reviews have they got
reviewCounts <- count(artists,"artist")
## only want to see artists with more than 1 reviews
reviewCountsEx1 <- reviewCounts[reviewCounts[,2]>1,]
artistsReviewOrder <- dbGetQuery(mydb, 'SELECT * FROM newreviews')
## test using massive attack
artistsReviewOrder[which(artistsReviewOrder[,"artist"]=="massive attack"),]
## test using oasis
artistsReviewOrder[which(artistsReviewOrder[,"artist"]=="oasis"),]
## test using muse
artistsReviewOrder[which(artistsReviewOrder[,"artist"]=="muse"),]
artistsHighestReviewAlbum <- dbGetQuery(mydb, 'SELECT max(t.score) AS score,count(*) AS numAlbums,t.artist,t.title,t.orderIndex,t.releaseYear FROM newreviews t GROUP BY t.artist')
## use massive attack to test
artistsHighestReviewAlbum[which(artistsHighestReviewAlbum[,"artist"] %in% c("massive attack","radiohead","arctic monkeys","muse","oasis")),c("score","title","artist","orderIndex","releaseYear","numAlbums")]
## plot the hist for artists that have >= 5 albums
hist(artistsHighestReviewAlbum[which(artistsHighestReviewAlbum[,"numAlbums"]>=5),"orderIndex"]-0.01,xlim = c(0,15),breaks=100)
dbGetQuery(mydb,'SELECT * FROM reviewWithGenres LIMIT 5')
dbGetQuery(mydb,'SELECT * FROM reviews LIMIT 5')
tableList <- dbListTables(mydb)
tableList
dbGetQuery(mydb,'SELECT * FROM years 5')
dbGetQuery(mydb,'SELECT * FROM years LIMIT 5')
head(churnAnalysis)
dbGetQuery(mydb,'SELECT DATEPART(month,pub_date) FROM reviews r ')
dbGetQuery(mydb,'SELECT DATEPART("m",pub_date) FROM reviews r ')
dbGetQuery(mydb,'SELECT pub_date,typeof(pub_date) FROM reviews r ')
